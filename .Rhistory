DTOutput("summaryTable"),
plotlyOutput("scatterplot"),
plotlyOutput("plot")
)
# Server
server <- function(input, output) {
## Reactive function to read and process and read the uploaded csv file.
Tabular_Data <- reactive({
req(input$file)
DF <- read_csv(input$file$datapath)
## Data Processing Feature
Processed_DF<-DF|>
replace_and_convert()|>
select(Place,Name,Club_Name = `Club(s)`)|>
mutate(Club_Name = str_split(Club_Name, "/", simplify = TRUE)[, 1])|>
mutate(Club_Name = str_trim(Club_Name, side = "right"))|>
group_by(Club_Name)|>
summarise(
Total_Number=n(),
Average_Position=as.integer(mean(Place)),
Highest_Ranking=as.integer(min(Place)),
Highest_Ranked_Fencer=Name[which.min(Place)],
Lowest_Ranking=as.integer(max(Place)),
Lowest_Ranked_Fencer=Name[which.max(Place)],
Gold = sum(Place == 1),
Silver = sum(Place == 2),
Bronze = sum(Place == 3),
Total_Medal_Count= sum(Gold,Silver,Bronze))|>
arrange(Total_Number)
return(Processed_DF)
})
## Separate data processing to compute other visualizations
Visualisation_Data <- reactive({
req(input$file)
DF <- read_csv(input$file$datapath)
## Visualized data for the performance of all fencers
Visualised_DF<-DF|>
replace_and_convert()|>
select(Place,Name,Club_Name = `Club(s)`)|>
mutate(Club_Name = str_split(Club_Name, "/", simplify = TRUE)[, 1])|>
mutate(Club_Name = str_trim(Club_Name, side = "right"))|>
group_by(Club_Name)
return(Visualised_DF)
})
## Display the individual performances of each fencers organised by clubs.
output$scatterplot <- renderPlotly({
data <- Visualisation_Data()
ggplot(data, aes(x = Place, y = Club_Name, color = as.factor(Place), text=Name )) +
geom_point(size=3,position = position_jitter(width = 0.2, height = 0)) +
labs(title = "Performance of all fencers", x = "Final Ranking", y = "Club Name", color = "Final Ranking") +
theme_minimal(base_size = 6) +
scale_color_manual(values = c("1" = "#fee101", "2" = "#d7d7d7", "3" = "#a77044", "darkgrey")) +
theme(legend.position = "none")
})
## Display the processed data in a table
output$summaryTable <- renderDT({
Tabular_Data()
})
output$plot <- renderPlotly({
data <- Tabular_Data()|>
mutate(Club_Name = reorder(Club_Name, Average_Position, decreasing = FALSE))
gg <- ggplot(data, aes(x = Club_Name, y = Average_Position, fill = Average_Position,text=Average_Position)) +
geom_col() +
scale_fill_gradient(low = "#66c2a5", high = "#fc8d62", name = "Average Position") +
labs(title = "Fencer Statistics by Club", x = "Club Name", y = "Average Position", fill = "Average Position") +
theme_minimal(base_size = 6) +
coord_flip()
ggplotly(gg, tooltip = "text")
})
}
# Run the Shiny app
shinyApp(ui, server)
# User defined function
replace_and_convert <- function(DF) {
DF$Place <- gsub("[^0-9.]+", "", DF$Place)
DF$Place <- as.numeric(DF$Place)
return(DF)
}
# UI
ui <- fluidPage(
titlePanel("Fencing Data Processing App"),
fileInput("file", "Choose CSV File"),
DTOutput("summaryTable"),
plotlyOutput("scatterplot"),
plotlyOutput("plot")
)
# Server
server <- function(input, output) {
## Reactive function to read and process and read the uploaded csv file.
Tabular_Data <- reactive({
req(input$file)
DF <- read_csv(input$file$datapath)
## Data Processing Feature
Processed_DF<-DF|>
replace_and_convert()|>
select(Place,Name,Club_Name = `Club(s)`)|>
mutate(Club_Name = str_split(Club_Name, "/", simplify = TRUE)[, 1])|>
mutate(Club_Name = str_trim(Club_Name, side = "right"))|>
group_by(Club_Name)|>
summarise(
Total_Number=n(),
Average_Position=as.integer(mean(Place)),
Highest_Ranking=as.integer(min(Place)),
Highest_Ranked_Fencer=Name[which.min(Place)],
Lowest_Ranking=as.integer(max(Place)),
Lowest_Ranked_Fencer=Name[which.max(Place)],
Gold = sum(Place == 1),
Silver = sum(Place == 2),
Bronze = sum(Place == 3),
Total_Medal_Count= sum(Gold,Silver,Bronze))|>
arrange(Total_Number)
return(Processed_DF)
})
## Separate data processing to compute other visualizations
Visualisation_Data <- reactive({
req(input$file)
DF <- read_csv(input$file$datapath)
## Visualized data for the performance of all fencers
Visualised_DF<-DF|>
replace_and_convert()|>
select(Place,Name,Club_Name = `Club(s)`)|>
mutate(Club_Name = str_split(Club_Name, "/", simplify = TRUE)[, 1])|>
mutate(Club_Name = str_trim(Club_Name, side = "right"))|>
group_by(Club_Name)
return(Visualised_DF)
})
## Display the individual performances of each fencers organised by clubs.
output$scatterplot <- renderPlotly({
data <- Visualisation_Data()
scatter_data <- ggplot(data, aes(x = Place, y = Club_Name, color = as.factor(Place), text = paste("Name: ", Name, "<br>Club: ", Club_Name, "<br>Final Ranking: ", Place))) +
geom_point(size=3,position = position_jitter(width = 0.2, height = 0)) +
labs(title = "Performance of all fencers", x = "Final Ranking", y = "Club Name", color = "Final Ranking") +
theme_minimal(base_size = 6) +
scale_color_manual(values = c("1" = "#fee101", "2" = "#d7d7d7", "3" = "#a77044", "darkgrey")) +
theme(legend.position = "none")
ggplotly(scatter_data, tooltip="text")
})
## Display the processed data in a table
output$summaryTable <- renderDT({
Tabular_Data()
})
output$plot <- renderPlotly({
data <- Tabular_Data()|>
mutate(Club_Name = reorder(Club_Name, Average_Position))
bar_data <- ggplot(data, aes(x = Club_Name, y = Average_Position, fill = Average_Position,text = Average_Position)) +
geom_col() +
scale_fill_gradient(low = "#66c2a5", high = "#fc8d62", name = "Average Position") +
labs(title = "Fencer Statistics by Club", x = "Club Name", y = "Average Position", fill = "Average Position") +
theme_minimal(base_size = 6) +
coord_flip()
ggplotly(bar_data, tooltip = "text")
})
}
# Run the Shiny app
shinyApp(ui, server)
# User defined function
replace_and_convert <- function(DF) {
DF$Place <- gsub("[^0-9.]+", "", DF$Place)
DF$Place <- as.numeric(DF$Place)
return(DF)
}
# UI
ui <- fluidPage(
titlePanel("Fencing Data Processing App"),
fileInput("file", "Choose CSV File"),
DTOutput("summaryTable"),
plotlyOutput("scatterplot"),
plotlyOutput("plot")
)
# Server
server <- function(input, output) {
## Reactive function to read and process and read the uploaded csv file.
Tabular_Data <- reactive({
req(input$file)
DF <- read_csv(input$file$datapath)
## Data Processing Feature
Processed_DF<-DF|>
replace_and_convert()|>
select(Place,Name,Club_Name = `Club(s)`)|>
mutate(Club_Name = str_split(Club_Name, "/", simplify = TRUE)[, 1])|>
mutate(Club_Name = str_trim(Club_Name, side = "right"))|>
group_by(Club_Name)|>
summarise(
Total_Number=n(),
Average_Position=as.integer(mean(Place)),
Highest_Ranking=as.integer(min(Place)),
Highest_Ranked_Fencer=Name[which.min(Place)],
Lowest_Ranking=as.integer(max(Place)),
Lowest_Ranked_Fencer=Name[which.max(Place)],
Gold = sum(Place == 1),
Silver = sum(Place == 2),
Bronze = sum(Place == 3),
Total_Medal_Count= sum(Gold,Silver,Bronze))|>
arrange(Total_Number)
return(Processed_DF)
})
## Separate data processing to compute other visualizations
Visualisation_Data <- reactive({
req(input$file)
DF <- read_csv(input$file$datapath)
## Visualized data for the performance of all fencers
Visualised_DF<-DF|>
replace_and_convert()|>
select(Place,Name,Club_Name = `Club(s)`)|>
mutate(Club_Name = str_split(Club_Name, "/", simplify = TRUE)[, 1])|>
mutate(Club_Name = str_trim(Club_Name, side = "right"))|>
group_by(Club_Name)
return(Visualised_DF)
})
## Display the individual performances of each fencers organised by clubs.
output$scatterplot <- renderPlotly({
data <- Visualisation_Data()
scatter_data <- ggplot(data, aes(x = Place, y = Club_Name, color = as.factor(Place), text = paste("Name:", Name, "<br>Club:", Club_Name, "<br>Final Ranking:", Place))) +
geom_point(size=3,position = position_jitter(width = 0.2, height = 0)) +
labs(title = "Performance of all fencers", x = "Final Ranking", y = "Club Name", color = "Final Ranking") +
theme_minimal(base_size = 6) +
scale_color_manual(values = c("1" = "#fee101", "2" = "#d7d7d7", "3" = "#a77044", "darkgrey")) +
theme(legend.position = "none")
ggplotly(scatter_data, tooltip="text")
})
## Display the processed data in a table
output$summaryTable <- renderDT({
Tabular_Data()
})
output$plot <- renderPlotly({
data <- Tabular_Data()|>
mutate(Club_Name = reorder(Club_Name, Average_Position))
bar_data <- ggplot(data, aes(x = Club_Name, y = Average_Position, fill = Average_Position,text = paste("Club Name:",Club_Name,"<br>Average Position:",Average_Position)) +
geom_col() +
scale_fill_gradient(low = "#66c2a5", high = "#fc8d62", name = "Average Position") +
labs(title = "Fencer Statistics by Club", x = "Club Name", y = "Average Position", fill = "Average Position") +
theme_minimal(base_size = 6) +
coord_flip()
ggplotly(bar_data, tooltip = "text")
# User defined function
replace_and_convert <- function(DF) {
DF$Place <- gsub("[^0-9.]+", "", DF$Place)
DF$Place <- as.numeric(DF$Place)
return(DF)
}
# UI
ui <- fluidPage(
titlePanel("Fencing Data Processing App"),
fileInput("file", "Choose CSV File"),
DTOutput("summaryTable"),
plotlyOutput("scatterplot"),
plotlyOutput("plot")
)
# Server
server <- function(input, output) {
## Reactive function to read and process and read the uploaded csv file.
Tabular_Data <- reactive({
req(input$file)
DF <- read_csv(input$file$datapath)
## Data Processing Feature
Processed_DF<-DF|>
replace_and_convert()|>
select(Place,Name,Club_Name = `Club(s)`)|>
mutate(Club_Name = str_split(Club_Name, "/", simplify = TRUE)[, 1])|>
mutate(Club_Name = str_trim(Club_Name, side = "right"))|>
group_by(Club_Name)|>
summarise(
Total_Number=n(),
Average_Position=as.integer(mean(Place)),
Highest_Ranking=as.integer(min(Place)),
Highest_Ranked_Fencer=Name[which.min(Place)],
Lowest_Ranking=as.integer(max(Place)),
Lowest_Ranked_Fencer=Name[which.max(Place)],
Gold = sum(Place == 1),
Silver = sum(Place == 2),
Bronze = sum(Place == 3),
Total_Medal_Count= sum(Gold,Silver,Bronze))|>
arrange(Total_Number)
return(Processed_DF)
})
## Separate data processing to compute other visualizations
Visualisation_Data <- reactive({
req(input$file)
DF <- read_csv(input$file$datapath)
## Visualized data for the performance of all fencers
Visualised_DF<-DF|>
replace_and_convert()|>
select(Place,Name,Club_Name = `Club(s)`)|>
mutate(Club_Name = str_split(Club_Name, "/", simplify = TRUE)[, 1])|>
mutate(Club_Name = str_trim(Club_Name, side = "right"))|>
group_by(Club_Name)
return(Visualised_DF)
})
## Display the individual performances of each fencers organised by clubs.
output$scatterplot <- renderPlotly({
data <- Visualisation_Data()
scatter_data <- ggplot(data, aes(x = Place, y = Club_Name, color = as.factor(Place), text = paste("Name:", Name, "<br>Club:", Club_Name, "<br>Final Ranking:", Place))) +
geom_point(size=3,position = position_jitter(width = 0.2, height = 0)) +
labs(title = "Performance of all fencers", x = "Final Ranking", y = "Club Name", color = "Final Ranking") +
theme_minimal(base_size = 6) +
scale_color_manual(values = c("1" = "#fee101", "2" = "#d7d7d7", "3" = "#a77044", "darkgrey")) +
theme(legend.position = "none")
ggplotly(scatter_data, tooltip="text")
})
## Display the processed data in a table
output$summaryTable <- renderDT({
Tabular_Data()
})
output$plot <- renderPlotly({
data <- Tabular_Data()|>
mutate(Club_Name = reorder(Club_Name, Average_Position))
bar_data <- ggplot(data, aes(x = Club_Name, y = Average_Position, fill = Average_Position,text = paste("Club Name:",Club_Name,"<br>Average Position:",Average_Position))) +
geom_col() +
scale_fill_gradient(low = "#66c2a5", high = "#fc8d62", name = "Average Position") +
labs(title = "Fencer Statistics by Club", x = "Club Name", y = "Average Position", fill = "Average Position") +
theme_minimal(base_size = 6) +
coord_flip()
ggplotly(bar_data, tooltip = "text")
})
}
# Run the Shiny app
shinyApp(ui, server)
# User defined function
replace_and_convert <- function(DF) {
DF$Place <- gsub("[^0-9.]+", "", DF$Place)
DF$Place <- as.numeric(DF$Place)
return(DF)
}
# UI
ui <- fluidPage(
titlePanel("Fencing Data Processing App"),
fileInput("file", "Choose CSV File"),
DTOutput("summaryTable"),
plotlyOutput("scatterplot"),
plotlyOutput("plot")
)
# Server
server <- function(input, output) {
## Reactive function to read and process and read the uploaded csv file.
Tabular_Data <- reactive({
req(input$file)
DF <- read_csv(input$file$datapath)
## Data Processing Feature
Processed_DF<-DF|>
replace_and_convert()|>
select(Place,Name,Club_Name = `Club(s)`)|>
mutate(Club_Name = str_split(Club_Name, "/", simplify = TRUE)[, 1])|>
mutate(Club_Name = str_trim(Club_Name, side = "right"))|>
group_by(Club_Name)|>
summarise(
Total_Number=n(),
Average_Position=as.integer(mean(Place)),
Highest_Ranking=as.integer(min(Place)),
Highest_Ranked_Fencer=Name[which.min(Place)],
Lowest_Ranking=as.integer(max(Place)),
Lowest_Ranked_Fencer=Name[which.max(Place)],
Gold = sum(Place == 1),
Silver = sum(Place == 2),
Bronze = sum(Place == 3),
Total_Medal_Count= sum(Gold,Silver,Bronze))|>
arrange(Total_Number)
return(Processed_DF)
})
## Separate data processing to compute other visualizations
Visualisation_Data <- reactive({
req(input$file)
DF <- read_csv(input$file$datapath)
## Visualized data for the performance of all fencers
Visualised_DF<-DF|>
replace_and_convert()|>
select(Place,Name,Club_Name = `Club(s)`)|>
mutate(Club_Name = str_split(Club_Name, "/", simplify = TRUE)[, 1])|>
mutate(Club_Name = str_trim(Club_Name, side = "right"))|>
group_by(Club_Name)
return(Visualised_DF)
})
## Display the individual performances of each fencers organised by clubs.
output$scatterplot <- renderPlotly({
data <- Visualisation_Data()
scatter_data <- ggplot(data, aes(x = Place, y = Club_Name, color = as.factor(Place), text = paste("Name:", Name, "<br>Club:", Club_Name, "<br>Final Ranking:", Place))) +
geom_point(size=3,position = position_jitter(width = 0.2, height = 0)) +
labs(title = "Performance of all fencers", x = "Final Ranking", y = "Club Name", color = "Final Ranking") +
theme_minimal(base_size = 6) +
scale_color_manual(values = c("1" = "#fee101", "2" = "#d7d7d7", "3" = "#a77044", "darkgrey")) +
theme(legend.position = "none")
ggplotly(scatter_data, tooltip="text")
})
## Display the processed data in a table
output$summaryTable <- renderDT({
Tabular_Data()
})
output$plot <- renderPlotly({
data <- Tabular_Data()|>
mutate(Club_Name = reorder(Club_Name, Average_Position))
bar_data <- ggplot(data, aes(x = Club_Name, y = Average_Position, fill = Average_Position,text = paste("Club Name:",Club_Name,"<br>Average Position:",Average_Position))) +
geom_col() +
scale_fill_gradient(low = "#66c2a5", high = "#fc8d62", name = "Average Position") +
labs(title = "Fencer Statistics by Club", x = "Club Name", y = "Average Position", fill = "Average Position") +
theme_minimal(base_size = 6) +
coord_flip()
ggplotly(bar_data, tooltip = "text")
})
}
# Run the Shiny app
shinyApp(ui, server)
getwd()
setwd("C:/Users/Nicholas/Desktop/New Folder")
# User defined function
replace_and_convert <- function(DF) {
DF$Place <- gsub("[^0-9.]+", "", DF$Place)
DF$Place <- as.numeric(DF$Place)
return(DF)
}
# UI
ui <- fluidPage(
titlePanel("Fencing Data Processing App"),
fileInput("file", "Choose CSV File"),
DTOutput("summaryTable"),
plotlyOutput("scatterplot"),
plotlyOutput("plot")
)
library(shiny)
library(dplyr)
library(readr)
library(stringr)
library(ggplot2)
library(plotly)
library(DT)
library(RColorBrewer)
# User defined function
replace_and_convert <- function(DF) {
DF$Place <- gsub("[^0-9.]+", "", DF$Place)
DF$Place <- as.numeric(DF$Place)
return(DF)
}
# UI
ui <- fluidPage(
titlePanel("Fencing Data Processing App"),
fileInput("file", "Choose CSV File"),
DTOutput("summaryTable"),
plotlyOutput("scatterplot"),
plotlyOutput("plot")
)
# Server
server <- function(input, output) {
## Reactive function to read and process and read the uploaded csv file.
Tabular_Data <- reactive({
req(input$file)
DF <- read_csv(input$file$datapath)
## Data Processing Feature
Processed_DF<-DF|>
replace_and_convert()|>
select(Place,Name,Club_Name = `Club(s)`)|>
mutate(Club_Name = str_split(Club_Name, "/", simplify = TRUE)[, 1])|>
mutate(Club_Name = str_trim(Club_Name, side = "right"))|>
group_by(Club_Name)|>
summarise(
Total_Number=n(),
Average_Position=as.integer(mean(Place)),
Highest_Ranking=as.integer(min(Place)),
Highest_Ranked_Fencer=Name[which.min(Place)],
Lowest_Ranking=as.integer(max(Place)),
Lowest_Ranked_Fencer=Name[which.max(Place)],
Gold = sum(Place == 1),
Silver = sum(Place == 2),
Bronze = sum(Place == 3),
Total_Medal_Count= sum(Gold,Silver,Bronze))|>
arrange(Total_Number)
return(Processed_DF)
})
## Separate data processing to compute other visualizations
Visualisation_Data <- reactive({
req(input$file)
DF <- read_csv(input$file$datapath)
## Visualized data for the performance of all fencers
Visualised_DF<-DF|>
replace_and_convert()|>
select(Place,Name,Club_Name = `Club(s)`)|>
mutate(Club_Name = str_split(Club_Name, "/", simplify = TRUE)[, 1])|>
mutate(Club_Name = str_trim(Club_Name, side = "right"))|>
group_by(Club_Name)
return(Visualised_DF)
})
## Display the individual performances of each fencers organised by clubs.
output$scatterplot <- renderPlotly({
data <- Visualisation_Data()
scatter_data <- ggplot(data, aes(x = Place, y = Club_Name, color = as.factor(Place), text = paste("Name:", Name, "<br>Club:", Club_Name, "<br>Final Ranking:", Place))) +
geom_point(size=3,position = position_jitter(width = 0.2, height = 0)) +
labs(title = "Performance of all fencers", x = "Final Ranking", y = "Club Name", color = "Final Ranking") +
theme_minimal(base_size = 6) +
scale_color_manual(values = c("1" = "#fee101", "2" = "#d7d7d7", "3" = "#a77044", "darkgrey")) +
theme(legend.position = "none")
ggplotly(scatter_data, tooltip="text")
})
## Display the processed data in a table
output$summaryTable <- renderDT({
Tabular_Data() %>%
datatable(options = list(
searching = TRUE,   # Enable searching
columnDefs = list(list(targets = "Club_Name", filter = "multi", searchDelay = 1000))
))
})
output$plot <- renderPlotly({
data <- Tabular_Data()|>
mutate(Club_Name = reorder(Club_Name, Average_Position))
bar_data <- ggplot(data, aes(x = Club_Name, y = Average_Position, fill = Average_Position,text = paste("Club Name:",Club_Name,"<br>Average Position:",Average_Position))) +
geom_col() +
scale_fill_gradient(low = "#66c2a5", high = "#fc8d62", name = "Average Position") +
labs(title = "Fencer Statistics by Club", x = "Club Name", y = "Average Position", fill = "Average Position") +
theme_minimal(base_size = 6) +
coord_flip()
ggplotly(bar_data, tooltip = "text")
})
}
# Run the Shiny app
shinyApp(ui, server)
?datatable
